1. Get the application URL by running these commands:
{{- if .Values.ingress.enabled }}
{{- range $host := .Values.ingress.hosts }}
  {{- range .paths }}
  http{{ if $.Values.ingress.tls }}s{{ end }}://{{ $host.host }}{{ .path }}
  {{- end }}
{{- end }}
{{- else if contains "NodePort" .Values.service.type }}
  export NODE_PORT=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath="{.spec.ports[0].nodePort}" services {{ include "tiris-backend.fullname" . }})
  export NODE_IP=$(kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath="{.items[0].status.addresses[0].address}")
  echo http://$NODE_IP:$NODE_PORT
{{- else if contains "LoadBalancer" .Values.service.type }}
     NOTE: It may take a few minutes for the LoadBalancer IP to be available.
           You can watch the status of by running 'kubectl get --namespace {{ .Release.Namespace }} svc -w {{ include "tiris-backend.fullname" . }}'
  export SERVICE_IP=$(kubectl get svc --namespace {{ .Release.Namespace }} {{ include "tiris-backend.fullname" . }} --template "{{"{{ range (index .status.loadBalancer.ingress 0) }}{{.}}{{ end }}"}}")
  echo http://$SERVICE_IP:{{ .Values.service.port }}
{{- else if contains "ClusterIP" .Values.service.type }}
  export POD_NAME=$(kubectl get pods --namespace {{ .Release.Namespace }} -l "{{ include "tiris-backend.selectorLabels" . }}" -o jsonpath="{.items[0].metadata.name}")
  export CONTAINER_PORT=$(kubectl get pod --namespace {{ .Release.Namespace }} $POD_NAME -o jsonpath="{.spec.containers[0].ports[0].containerPort}")
  echo "Visit http://127.0.0.1:8080 to use your application"
  kubectl --namespace {{ .Release.Namespace }} port-forward $POD_NAME 8080:$CONTAINER_PORT
{{- end }}

2. Check the status of your deployment:
   kubectl get pods --namespace {{ .Release.Namespace }} -l "{{ include "tiris-backend.selectorLabels" . }}"

3. View application logs:
   kubectl logs --namespace {{ .Release.Namespace }} -l "{{ include "tiris-backend.selectorLabels" . }}" -f

4. Access metrics endpoint:
{{- if .Values.ingress.enabled }}
   {{- range $host := .Values.ingress.hosts }}
   http{{ if $.Values.ingress.tls }}s{{ end }}://{{ $host.host }}/metrics
   {{- end }}
{{- else }}
   kubectl port-forward --namespace {{ .Release.Namespace }} svc/{{ include "tiris-backend.fullname" . }} 9090:9090
   Then access: http://localhost:9090/metrics
{{- end }}

5. Database migration status:
   kubectl get jobs --namespace {{ .Release.Namespace }} -l "app.kubernetes.io/component=migration"

6. Health check endpoints:
   - Liveness: {{ .Values.healthcheck.livenessProbe.path }}
   - Readiness: {{ .Values.healthcheck.readinessProbe.path }}

{{- if .Values.autoscaling.enabled }}
7. Horizontal Pod Autoscaler status:
   kubectl get hpa --namespace {{ .Release.Namespace }} {{ include "tiris-backend.fullname" . }}-hpa
{{- end }}

{{- if and .Values.monitoring.enabled .Values.monitoring.serviceMonitor.enabled }}
8. Prometheus ServiceMonitor created for metrics scraping
{{- end }}

{{- if and .Values.monitoring.enabled .Values.monitoring.prometheusRule.enabled }}
9. PrometheusRule created with alerting rules
{{- end }}

{{- if .Values.networkPolicy.enabled }}
10. Network policies are enabled - ensure your ingress controller and monitoring systems have proper access
{{- end }}

Configuration:
- Environment: {{ .Values.config.environment }}
- Replicas: {{ .Values.deployment.replicaCount }}
{{- if .Values.autoscaling.enabled }}
- Auto-scaling: {{ .Values.autoscaling.minReplicas }}-{{ .Values.autoscaling.maxReplicas }} replicas
{{- end }}
- Database: {{ include "tiris-backend.postgresHost" . }}:{{ .Values.config.database.port }}/{{ .Values.config.database.name }}
- NATS: {{ include "tiris-backend.natsHost" . }}:4222
- Redis: {{ include "tiris-backend.redisHost" . }}:6379

⚠️  SECURITY NOTICE:
Please ensure you have updated all default passwords and secrets in production!
Default values are provided for development/testing only.

For production deployments:
- Update all secrets in values.yaml or use external secret management
- Configure TLS certificates for ingress
- Set up proper RBAC and security contexts
- Configure backup and disaster recovery procedures