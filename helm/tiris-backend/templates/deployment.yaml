apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "tiris-backend.fullname" . }}
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "tiris-backend.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.deployment.replicaCount }}
  strategy:
    {{- toYaml .Values.deployment.strategy | nindent 4 }}
  selector:
    matchLabels:
      {{- include "tiris-backend.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      annotations:
        {{- with .Values.podAnnotations }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
        checksum/config: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
        checksum/secret: {{ include (print $.Template.BasePath "/secrets.yaml") . | sha256sum }}
      labels:
        {{- include "tiris-backend.selectorLabels" . | nindent 8 }}
        {{- with .Values.labels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      serviceAccountName: {{ include "tiris-backend.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.deployment.securityContext | nindent 8 }}
      {{- with .Values.image.pullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      initContainers:
      - name: wait-for-postgres
        image: postgres:15-alpine
        command: ['sh', '-c']
        args:
        - |
          until pg_isready -h {{ .Values.config.database.host }} -p {{ .Values.config.database.port }} -U {{ .Values.config.database.user }}; do
            echo "Waiting for PostgreSQL to be ready..."
            sleep 2
          done
          echo "PostgreSQL is ready"
        env:
        - name: PGPASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ include "tiris-backend.fullname" . }}-secrets
              key: database-password
      - name: wait-for-nats
        image: nats:alpine
        command: ['sh', '-c']
        args:
        - |
          until nats server check --server nats://{{ include "tiris-backend.natsHost" . }}:4222; do
            echo "Waiting for NATS to be ready..."
            sleep 2
          done
          echo "NATS is ready"
      - name: wait-for-redis
        image: redis:7-alpine
        command: ['sh', '-c']
        args:
        - |
          until redis-cli -h {{ include "tiris-backend.redisHost" . }} -p 6379 ping; do
            echo "Waiting for Redis to be ready..."
            sleep 2
          done
          echo "Redis is ready"
      containers:
      - name: {{ .Chart.Name }}
        image: "{{ .Values.image.registry }}/{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        ports:
        - name: http
          containerPort: {{ .Values.service.targetPort }}
          protocol: TCP
        - name: metrics
          containerPort: 9090
          protocol: TCP
        env:
        - name: ENV
          value: {{ .Values.config.environment }}
        - name: LOG_LEVEL
          value: {{ .Values.config.logLevel }}
        - name: LOG_FORMAT
          value: {{ .Values.config.logFormat }}
        - name: DB_HOST
          value: {{ .Values.config.database.host }}
        - name: DB_PORT
          value: {{ .Values.config.database.port | quote }}
        - name: DB_NAME
          value: {{ .Values.config.database.name }}
        - name: DB_USER
          value: {{ .Values.config.database.user }}
        - name: DB_SSL_MODE
          value: {{ .Values.config.database.sslMode }}
        - name: DB_MAX_OPEN_CONNECTIONS
          value: {{ .Values.config.database.maxOpenConnections | quote }}
        - name: DB_MAX_IDLE_CONNECTIONS
          value: {{ .Values.config.database.maxIdleConnections | quote }}
        - name: DB_CONNECTION_MAX_LIFETIME
          value: {{ .Values.config.database.connectionMaxLifetime | quote }}
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ include "tiris-backend.fullname" . }}-secrets
              key: database-password
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: {{ include "tiris-backend.fullname" . }}-secrets
              key: jwt-secret
        - name: JWT_EXPIRATION
          value: {{ .Values.config.jwt.expiration | quote }}
        - name: JWT_REFRESH_SECRET
          valueFrom:
            secretKeyRef:
              name: {{ include "tiris-backend.fullname" . }}-secrets
              key: refresh-secret
        - name: JWT_REFRESH_EXPIRATION
          value: {{ .Values.config.jwt.refreshExpiration | quote }}
        - name: NATS_URL
          value: "nats://{{ include "tiris-backend.natsHost" . }}:4222"
        - name: NATS_USER
          valueFrom:
            secretKeyRef:
              name: {{ include "tiris-backend.fullname" . }}-secrets
              key: nats-user
        - name: NATS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ include "tiris-backend.fullname" . }}-secrets
              key: nats-password
        - name: REDIS_HOST
          value: {{ include "tiris-backend.redisHost" . }}
        - name: REDIS_PORT
          value: "6379"
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ include "tiris-backend.fullname" . }}-secrets
              key: redis-password
        - name: CORS_ALLOWED_ORIGINS
          value: {{ .Values.config.cors.allowedOrigins }}
        - name: CORS_ALLOWED_METHODS
          value: {{ .Values.config.cors.allowedMethods }}
        - name: CORS_ALLOWED_HEADERS
          value: {{ .Values.config.cors.allowedHeaders }}
        - name: RATE_LIMIT_ENABLED
          value: {{ .Values.config.rateLimit.enabled | quote }}
        - name: RATE_LIMIT_REQUESTS_PER_MINUTE
          value: {{ .Values.config.rateLimit.requestsPerMinute | quote }}
        - name: RATE_LIMIT_BURST
          value: {{ .Values.config.rateLimit.burst | quote }}
        - name: METRICS_ENABLED
          value: {{ .Values.config.metrics.enabled | quote }}
        - name: METRICS_PATH
          value: {{ .Values.config.metrics.path }}
        - name: GOOGLE_CLIENT_ID
          valueFrom:
            secretKeyRef:
              name: {{ include "tiris-backend.fullname" . }}-secrets
              key: google-client-id
        - name: GOOGLE_CLIENT_SECRET
          valueFrom:
            secretKeyRef:
              name: {{ include "tiris-backend.fullname" . }}-secrets
              key: google-client-secret
        - name: WECHAT_APP_ID
          valueFrom:
            secretKeyRef:
              name: {{ include "tiris-backend.fullname" . }}-secrets
              key: wechat-app-id
        - name: WECHAT_APP_SECRET
          valueFrom:
            secretKeyRef:
              name: {{ include "tiris-backend.fullname" . }}-secrets
              key: wechat-app-secret
        {{- range .Values.extraEnvVars }}
        - name: {{ .name }}
          value: {{ .value | quote }}
        {{- end }}
        livenessProbe:
          httpGet:
            path: {{ .Values.healthcheck.livenessProbe.path }}
            port: http
          initialDelaySeconds: {{ .Values.healthcheck.livenessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.healthcheck.livenessProbe.periodSeconds }}
          timeoutSeconds: {{ .Values.healthcheck.livenessProbe.timeoutSeconds }}
          failureThreshold: {{ .Values.healthcheck.livenessProbe.failureThreshold }}
        readinessProbe:
          httpGet:
            path: {{ .Values.healthcheck.readinessProbe.path }}
            port: http
          initialDelaySeconds: {{ .Values.healthcheck.readinessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.healthcheck.readinessProbe.periodSeconds }}
          timeoutSeconds: {{ .Values.healthcheck.readinessProbe.timeoutSeconds }}
          failureThreshold: {{ .Values.healthcheck.readinessProbe.failureThreshold }}
        resources:
          {{- toYaml .Values.deployment.resources | nindent 12 }}
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1001
          capabilities:
            drop:
            - ALL
        volumeMounts:
        - name: tmp-volume
          mountPath: /tmp
        - name: var-cache-volume
          mountPath: /var/cache
        {{- with .Values.extraVolumeMounts }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      volumes:
      - name: tmp-volume
        emptyDir: {}
      - name: var-cache-volume
        emptyDir: {}
      {{- with .Values.extraVolumes }}
      {{- toYaml . | nindent 6 }}
      {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}