#!/bin/bash

# API Testing Script for Tiris Backend
# 
# This script tests API authentication and exchange creation using JWT tokens.
# 
# IMPORTANT: This uses a JWT token for API authentication, NOT OAuth tokens.
# - JWT tokens are generated by scripts/generate-jwt-token.go
# - JWT tokens are used for all API requests (format: eyJ...)
# - OAuth tokens are stored in the database for provider integration
# 
# To get a fresh JWT token:
# 1. Create a test user: ./scripts/create-test-user.sh --name "Your Name"
# 2. Copy the JWT token from the output
# 3. Update the ACCESS_TOKEN variable below

# JWT Access Token for API Authentication
# This is a JWT token (3 parts separated by dots) that contains user claims
ACCESS_TOKEN=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiN2U2YTg5ZTYtM2U0Ni00MWQzLWFlYzYtMjg1ZmQ5Mjg5ODNiIiwidXNlcm5hbWUiOiJhbGV4IiwiZW1haWwiOiJhbGV4QHRpcmlzLmxvY2FsIiwicm9sZSI6InVzZXIiLCJpc3MiOiJ0aXJpcy1iYWNrZW5kIiwic3ViIjoiN2U2YTg5ZTYtM2U0Ni00MWQzLWFlYzYtMjg1ZmQ5Mjg5ODNiIiwiZXhwIjoxNzg2OTk5NjQyLCJuYmYiOjE3NTU0NjM2NDIsImlhdCI6MTc1NTQ2MzY0Mn0.T-c21MuwByZ8aeaahM45eECZt9FNwB5JC1OcS1glee8

# Base URL for API
BASE_URL="http://localhost:8080/v1"

# Common headers
AUTH_HEADER="Authorization: Bearer $ACCESS_TOKEN"
CONTENT_HEADER="Content-Type: application/json"

# Color codes for output
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    local color=$1
    local message=$2
    echo -e "${color}${message}${NC}"
}

print_header() {
    echo ""
    echo "========================================"
    print_status $BLUE "$1"
    echo "========================================"
}

# Test 1: Authentication Test
print_header "🔧 Testing API Authentication"
echo "Endpoint: GET /v1/users/me"
echo "Auth: Bearer JWT Token"
echo ""

USER_RESPONSE=$(curl -s -H "$AUTH_HEADER" -H "$CONTENT_HEADER" "$BASE_URL/users/me")
USER_STATUS=$?

if [ $USER_STATUS -eq 0 ]; then
    echo "$USER_RESPONSE" | jq . 2>/dev/null || echo "$USER_RESPONSE"
    print_status $GREEN "✅ Authentication test completed"
else
    print_status $RED "❌ Authentication test failed"
fi

# Test 2: Create Binance Exchange
print_header "🏦 Testing Binance Exchange Creation"
echo "Endpoint: POST /v1/exchanges"
echo "Exchange Type: binance"
echo ""

BINANCE_PAYLOAD='{
  "name": "My Binance Account",
  "type": "binance",
  "api_key": "test_binance_api_key_12345",
  "api_secret": "test_binance_secret_67890"
}'

echo "Request payload:"
echo "$BINANCE_PAYLOAD" | jq .

echo ""
echo "Response:"
BINANCE_RESPONSE=$(curl -s -X POST \
  -H "$AUTH_HEADER" \
  -H "$CONTENT_HEADER" \
  -d "$BINANCE_PAYLOAD" \
  "$BASE_URL/exchanges")

echo "$BINANCE_RESPONSE" | jq . 2>/dev/null || echo "$BINANCE_RESPONSE"

# Check if creation was successful (look for success=true and id in data)
if echo "$BINANCE_RESPONSE" | jq -e '.success == true and .data.id' > /dev/null 2>&1; then
    print_status $GREEN "✅ Binance exchange created successfully"
    BINANCE_ID=$(echo "$BINANCE_RESPONSE" | jq -r '.data.id')
    echo "Exchange ID: $BINANCE_ID"
else
    print_status $RED "❌ Binance exchange creation failed"
fi

# Test 3: Create OKX Exchange  
print_header "🏦 Testing OKX Exchange Creation"
echo "Endpoint: POST /v1/exchanges"
echo "Exchange Type: okx"
echo ""

OKX_PAYLOAD='{
  "name": "My OKX Account",
  "type": "okx",
  "api_key": "test_okx_api_key_54321",
  "api_secret": "test_okx_secret_09876"
}'

echo "Request payload:"
echo "$OKX_PAYLOAD" | jq .

echo ""
echo "Response:"
OKX_RESPONSE=$(curl -s -X POST \
  -H "$AUTH_HEADER" \
  -H "$CONTENT_HEADER" \
  -d "$OKX_PAYLOAD" \
  "$BASE_URL/exchanges")

echo "$OKX_RESPONSE" | jq . 2>/dev/null || echo "$OKX_RESPONSE"

if echo "$OKX_RESPONSE" | jq -e '.success == true and .data.id' > /dev/null 2>&1; then
    print_status $GREEN "✅ OKX exchange created successfully"
    OKX_ID=$(echo "$OKX_RESPONSE" | jq -r '.data.id')
    echo "Exchange ID: $OKX_ID"
else
    print_status $RED "❌ OKX exchange creation failed"
fi

# Test 4: Create Bybit Exchange
print_header "🏦 Testing Bybit Exchange Creation"
echo "Endpoint: POST /v1/exchanges"
echo "Exchange Type: bybit"
echo ""

BYBIT_PAYLOAD='{
  "name": "My Bybit Account",
  "type": "bybit",
  "api_key": "test_bybit_api_key_99999",
  "api_secret": "test_bybit_secret_11111"
}'

echo "Request payload:"
echo "$BYBIT_PAYLOAD" | jq .

echo ""
echo "Response:"
BYBIT_RESPONSE=$(curl -s -X POST \
  -H "$AUTH_HEADER" \
  -H "$CONTENT_HEADER" \
  -d "$BYBIT_PAYLOAD" \
  "$BASE_URL/exchanges")

echo "$BYBIT_RESPONSE" | jq . 2>/dev/null || echo "$BYBIT_RESPONSE"

if echo "$BYBIT_RESPONSE" | jq -e '.success == true and .data.id' > /dev/null 2>&1; then
    print_status $GREEN "✅ Bybit exchange created successfully"
    BYBIT_ID=$(echo "$BYBIT_RESPONSE" | jq -r '.data.id')
    echo "Exchange ID: $BYBIT_ID"
else
    print_status $RED "❌ Bybit exchange creation failed"
fi

# Test 5: Error Handling - Invalid Exchange Type
print_header "❌ Testing Error Handling - Invalid Exchange Type"
echo "Endpoint: POST /v1/exchanges"
echo "Exchange Type: invalid"
echo ""

INVALID_PAYLOAD='{
  "name": "Invalid Exchange",
  "type": "invalid",
  "api_key": "test_key",
  "api_secret": "test_secret"
}'

echo "Request payload:"
echo "$INVALID_PAYLOAD" | jq .

echo ""
echo "Response:"
INVALID_RESPONSE=$(curl -s -X POST \
  -H "$AUTH_HEADER" \
  -H "$CONTENT_HEADER" \
  -d "$INVALID_PAYLOAD" \
  "$BASE_URL/exchanges")

echo "$INVALID_RESPONSE" | jq . 2>/dev/null || echo "$INVALID_RESPONSE"

if echo "$INVALID_RESPONSE" | jq -e '.error' > /dev/null 2>&1; then
    print_status $GREEN "✅ Error handling works correctly"
else
    print_status $RED "❌ Error handling test failed"
fi

# Test 6: Error Handling - Missing Required Fields
print_header "❌ Testing Error Handling - Missing Required Fields"
echo "Endpoint: POST /v1/exchanges"
echo "Missing: api_secret field"
echo ""

MISSING_FIELDS_PAYLOAD='{
  "name": "Incomplete Exchange",
  "type": "binance",
  "api_key": "test_key"
}'

echo "Request payload:"
echo "$MISSING_FIELDS_PAYLOAD" | jq .

echo ""
echo "Response:"
MISSING_RESPONSE=$(curl -s -X POST \
  -H "$AUTH_HEADER" \
  -H "$CONTENT_HEADER" \
  -d "$MISSING_FIELDS_PAYLOAD" \
  "$BASE_URL/exchanges")

echo "$MISSING_RESPONSE" | jq . 2>/dev/null || echo "$MISSING_RESPONSE"

if echo "$MISSING_RESPONSE" | jq -e '.error' > /dev/null 2>&1; then
    print_status $GREEN "✅ Missing fields validation works correctly"
else
    print_status $RED "❌ Missing fields validation test failed"
fi

# Test 7: List User Exchanges
print_header "📋 Testing List User Exchanges"
echo "Endpoint: GET /v1/exchanges"
echo ""

EXCHANGES_RESPONSE=$(curl -s -H "$AUTH_HEADER" -H "$CONTENT_HEADER" "$BASE_URL/exchanges")

echo "Response:"
echo "$EXCHANGES_RESPONSE" | jq . 2>/dev/null || echo "$EXCHANGES_RESPONSE"

if echo "$EXCHANGES_RESPONSE" | jq -e '.success == true and .data.exchanges | type == "array"' > /dev/null 2>&1; then
    EXCHANGE_COUNT=$(echo "$EXCHANGES_RESPONSE" | jq '.data.exchanges | length')
    print_status $GREEN "✅ Successfully retrieved $EXCHANGE_COUNT exchanges"
else
    print_status $RED "❌ Failed to retrieve exchanges list"
fi

# Test 8: Duplicate Exchange Name Test (Conflict)
print_header "⚠️  Testing Duplicate Exchange Name"
echo "Endpoint: POST /v1/exchanges"
echo "Trying to create exchange with same name"
echo ""

DUPLICATE_PAYLOAD='{
  "name": "My Binance Account",
  "type": "binance",
  "api_key": "different_api_key",
  "api_secret": "different_secret"
}'

echo "Request payload:"
echo "$DUPLICATE_PAYLOAD" | jq .

echo ""
echo "Response:"
DUPLICATE_RESPONSE=$(curl -s -X POST \
  -H "$AUTH_HEADER" \
  -H "$CONTENT_HEADER" \
  -d "$DUPLICATE_PAYLOAD" \
  "$BASE_URL/exchanges")

echo "$DUPLICATE_RESPONSE" | jq . 2>/dev/null || echo "$DUPLICATE_RESPONSE"

if echo "$DUPLICATE_RESPONSE" | jq -e '.error' > /dev/null 2>&1; then
    print_status $GREEN "✅ Duplicate name validation works correctly"
else
    print_status $YELLOW "⚠️  Duplicate name test - check if this should be prevented"
fi

# Summary
print_header "📊 Test Summary"
echo "All exchange creation tests completed!"
echo ""
echo "📝 Notes:"
echo "- If you get 401 Unauthorized, the JWT token may be expired"
echo "- Create a new test user to get a fresh JWT token: ./scripts/create-test-user.sh"
echo "- Check the API documentation at http://localhost:8080/docs for more details"
echo "- JWT tokens are different from OAuth tokens stored in the database"
echo ""
echo "🔗 Useful endpoints:"
echo "  - GET  /v1/exchanges        - List user exchanges"
echo "  - POST /v1/exchanges        - Create new exchange"
echo "  - GET  /v1/exchanges/{id}   - Get specific exchange"
echo "  - PUT  /v1/exchanges/{id}   - Update exchange"
echo "  - DELETE /v1/exchanges/{id} - Delete exchange"

