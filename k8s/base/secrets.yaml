# Kubernetes Secrets Template
# WARNING: This is a template file with placeholder values
# In production, create actual secrets using:
# kubectl create secret generic tiris-backend-secrets --from-literal=key=value

apiVersion: v1
kind: Secret
metadata:
  name: tiris-backend-secrets
  namespace: tiris
type: Opaque
stringData:
  # Database Credentials
  DB_PASSWORD: "CHANGEME_PRODUCTION_DB_PASSWORD"
  
  # JWT Secrets (base64 encoded in production)
  JWT_SECRET: "CHANGEME_PRODUCTION_JWT_SECRET_32_CHARS_MIN"
  REFRESH_SECRET: "CHANGEME_PRODUCTION_REFRESH_SECRET_32_CHARS"
  
  # OAuth Credentials
  GOOGLE_CLIENT_ID: "your-google-client-id.apps.googleusercontent.com"
  GOOGLE_CLIENT_SECRET: "CHANGEME_GOOGLE_CLIENT_SECRET"
  WECHAT_APP_ID: "wx1234567890abcdef"
  WECHAT_APP_SECRET: "CHANGEME_WECHAT_APP_SECRET"
  
  # NATS Authentication
  NATS_USER: "nats_user"
  NATS_PASSWORD: "CHANGEME_PRODUCTION_NATS_PASSWORD"
  
  # Redis Authentication
  REDIS_PASSWORD: "CHANGEME_PRODUCTION_REDIS_PASSWORD"

---
apiVersion: v1
kind: Secret
metadata:
  name: tiris-postgres-secrets
  namespace: tiris
type: Opaque
stringData:
  POSTGRES_PASSWORD: "CHANGEME_PRODUCTION_DB_PASSWORD"
  POSTGRES_INITDB_ARGS: "--auth-host=md5"

---
apiVersion: v1
kind: Secret
metadata:
  name: tiris-tls-secret
  namespace: tiris
type: kubernetes.io/tls
data:
  # TLS certificate for tiris.ai (base64 encoded)
  # Generate with: kubectl create secret tls tiris-tls-secret --cert=path/to/tls.crt --key=path/to/tls.key
  tls.crt: LS0tLS1CRUdJTi... # placeholder
  tls.key: LS0tLS1CRUdJTi... # placeholder