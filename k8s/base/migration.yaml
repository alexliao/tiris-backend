apiVersion: batch/v1
kind: Job
metadata:
  name: tiris-migration
  namespace: tiris
  labels:
    app: tiris-backend
    component: migration
  annotations:
    # Run migrations before application deployment
    argocd.argoproj.io/hook: PreSync
    argocd.argoproj.io/hook-delete-policy: BeforeHookCreation
spec:
  backoffLimit: 3
  template:
    metadata:
      labels:
        app: tiris-backend
        component: migration
    spec:
      restartPolicy: Never
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        runAsGroup: 1001
        fsGroup: 1001
      containers:
      - name: migration
        image: tiris/backend:latest
        command: ["/app/docker-entrypoint.sh", "migrate-up"]
        env:
        - name: DB_HOST
          valueFrom:
            configMapKeyRef:
              name: tiris-backend-config
              key: DB_HOST
        - name: DB_PORT
          valueFrom:
            configMapKeyRef:
              name: tiris-backend-config
              key: DB_PORT
        - name: DB_NAME
          valueFrom:
            configMapKeyRef:
              name: tiris-backend-config
              key: DB_NAME
        - name: DB_USER
          valueFrom:
            configMapKeyRef:
              name: tiris-backend-config
              key: DB_USER
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: tiris-backend-secrets
              key: DB_PASSWORD
        - name: DB_SSL_MODE
          valueFrom:
            configMapKeyRef:
              name: tiris-backend-config
              key: DB_SSL_MODE
        - name: WAIT_FOR_DB
          value: "true"
        resources:
          requests:
            memory: "256Mi"
            cpu: "200m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
        volumeMounts:
        - name: tmp
          mountPath: /tmp
      volumes:
      - name: tmp
        emptyDir: {}
      
      initContainers:
      - name: wait-for-postgres
        image: busybox:1.35
        command: ['sh', '-c']
        args:
        - |
          echo "Waiting for PostgreSQL to be ready..."
          until nc -z tiris-postgres-service 5432; do
            echo "PostgreSQL not ready, waiting..."
            sleep 5
          done
          echo "PostgreSQL is ready!"