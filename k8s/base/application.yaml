apiVersion: apps/v1
kind: Deployment
metadata:
  name: tiris-backend
  namespace: tiris
  labels:
    app: tiris-backend
    component: application
spec:
  replicas: 2
  selector:
    matchLabels:
      app: tiris-backend
  template:
    metadata:
      labels:
        app: tiris-backend
        component: application
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/metrics"
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        runAsGroup: 1001
        fsGroup: 1001
      containers:
      - name: tiris-backend
        image: tiris/backend:latest
        ports:
        - containerPort: 8080
          name: http
        env:
        # Application Configuration
        - name: ENV
          value: "production"
        - name: GIN_MODE
          valueFrom:
            configMapKeyRef:
              name: tiris-backend-config
              key: GIN_MODE
        - name: LOG_LEVEL
          valueFrom:
            configMapKeyRef:
              name: tiris-backend-config
              key: LOG_LEVEL
        - name: LOG_FORMAT
          valueFrom:
            configMapKeyRef:
              name: tiris-backend-config
              key: LOG_FORMAT
        
        # Database Configuration
        - name: DB_HOST
          valueFrom:
            configMapKeyRef:
              name: tiris-backend-config
              key: DB_HOST
        - name: DB_PORT
          valueFrom:
            configMapKeyRef:
              name: tiris-backend-config
              key: DB_PORT
        - name: DB_NAME
          valueFrom:
            configMapKeyRef:
              name: tiris-backend-config
              key: DB_NAME
        - name: DB_USER
          valueFrom:
            configMapKeyRef:
              name: tiris-backend-config
              key: DB_USER
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: tiris-backend-secrets
              key: DB_PASSWORD
        - name: DB_SSL_MODE
          valueFrom:
            configMapKeyRef:
              name: tiris-backend-config
              key: DB_SSL_MODE
        
        # NATS Configuration
        - name: NATS_URL
          value: "nats://$(NATS_USER):$(NATS_PASSWORD)@tiris-nats-service:4222"
        - name: NATS_USER
          valueFrom:
            secretKeyRef:
              name: tiris-backend-secrets
              key: NATS_USER
        - name: NATS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: tiris-backend-secrets
              key: NATS_PASSWORD
        
        # Redis Configuration
        - name: REDIS_URL
          value: "redis://:$(REDIS_PASSWORD)@tiris-redis-service:6379/0"
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: tiris-backend-secrets
              key: REDIS_PASSWORD
        
        # JWT Configuration
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: tiris-backend-secrets
              key: JWT_SECRET
        - name: REFRESH_SECRET
          valueFrom:
            secretKeyRef:
              name: tiris-backend-secrets
              key: REFRESH_SECRET
        - name: JWT_EXPIRATION
          valueFrom:
            configMapKeyRef:
              name: tiris-backend-config
              key: JWT_EXPIRATION
        - name: REFRESH_EXPIRATION
          valueFrom:
            configMapKeyRef:
              name: tiris-backend-config
              key: REFRESH_EXPIRATION
        
        # OAuth Configuration
        - name: GOOGLE_CLIENT_ID
          valueFrom:
            secretKeyRef:
              name: tiris-backend-secrets
              key: GOOGLE_CLIENT_ID
        - name: GOOGLE_CLIENT_SECRET
          valueFrom:
            secretKeyRef:
              name: tiris-backend-secrets
              key: GOOGLE_CLIENT_SECRET
        - name: WECHAT_APP_ID
          valueFrom:
            secretKeyRef:
              name: tiris-backend-secrets
              key: WECHAT_APP_ID
        - name: WECHAT_APP_SECRET
          valueFrom:
            secretKeyRef:
              name: tiris-backend-secrets
              key: WECHAT_APP_SECRET
        
        # CORS and Rate Limiting
        - name: CORS_ALLOWED_ORIGINS
          value: "https://tiris.ai,https://app.tiris.ai,https://admin.tiris.ai"
        - name: RATE_LIMIT_ENABLED
          valueFrom:
            configMapKeyRef:
              name: tiris-backend-config
              key: RATE_LIMIT_ENABLED
        
        # Container Settings
        - name: WAIT_FOR_DB
          valueFrom:
            configMapKeyRef:
              name: tiris-backend-config
              key: WAIT_FOR_DB
        
        resources:
          requests:
            memory: "512Mi"
            cpu: "500m"
          limits:
            memory: "1Gi"
            cpu: "1000m"
        
        livenessProbe:
          httpGet:
            path: /health/live
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        
        readinessProbe:
          httpGet:
            path: /health/ready
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 5
          failureThreshold: 3
        
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
        
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: app-logs
          mountPath: /app/logs
      
      initContainers:
      - name: wait-for-dependencies
        image: busybox:1.35
        command: ['sh', '-c']
        args:
        - |
          echo "Waiting for PostgreSQL..."
          until nc -z tiris-postgres-service 5432; do
            echo "PostgreSQL not ready, waiting..."
            sleep 5
          done
          echo "PostgreSQL is ready!"
          
          echo "Waiting for NATS..."
          until nc -z tiris-nats-service 4222; do
            echo "NATS not ready, waiting..."
            sleep 5
          done
          echo "NATS is ready!"
          
          echo "Waiting for Redis..."
          until nc -z tiris-redis-service 6379; do
            echo "Redis not ready, waiting..."
            sleep 5
          done
          echo "Redis is ready!"
          
          echo "All dependencies are ready!"
      
      volumes:
      - name: tmp
        emptyDir: {}
      - name: app-logs
        emptyDir: {}
      
      # Run migrations as a separate job
      # See migration.yaml for the migration job
---
apiVersion: v1
kind: Service
metadata:
  name: tiris-backend-service
  namespace: tiris
  labels:
    app: tiris-backend
    component: application
spec:
  type: ClusterIP
  ports:
  - port: 8080
    targetPort: 8080
    protocol: TCP
    name: http
  selector:
    app: tiris-backend
---
apiVersion: v1
kind: Service
metadata:
  name: tiris-backend-metrics
  namespace: tiris
  labels:
    app: tiris-backend
    component: metrics
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "8080"
    prometheus.io/path: "/metrics"
spec:
  type: ClusterIP
  ports:
  - port: 8080
    targetPort: 8080
    protocol: TCP
    name: metrics
  selector:
    app: tiris-backend