# Simple Docker Compose for Quick Deployment
# Minimal setup to get Tiris Backend online quickly

services:
  # PostgreSQL Database
  postgres:
    image: timescale/timescaledb:latest-pg15
    container_name: tiris-postgres-simple
    restart: always
    environment:
      POSTGRES_DB: ${DB_NAME:-tiris}
      POSTGRES_USER: ${DB_USER:-tiris_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-changeme}
    ports:
      - "${DB_PORT:-5432}:5432"
    volumes:
      - postgres_simple_data:/var/lib/postgresql/data
      - ./migrations:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-tiris_user} -d ${DB_NAME:-tiris}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - tiris-backend-network

  # Main Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    image: tiris/backend:simple
    container_name: tiris-app-simple
    restart: always
    env_file:
      - .env.simple
    environment:
      # Docker-specific overrides
      DB_HOST: postgres      # Override to use service name instead of localhost
      DB_PORT: 5432          # Internal container port
      
      # Simple deployment overrides
      REDIS_ENABLED: "false"
      NATS_ENABLED: "false"
      NATS_URL: nats://dummy:4222
      METRICS_ENABLED: "false"
      
    ports:
      - "8080:8080"  # Fixed port for reverse proxy access
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - tiris-backend-network

  # Nginx Reverse Proxy with Let's Encrypt SSL
  nginx:
    image: nginx:alpine
    container_name: tiris-nginx-simple
    restart: always
    ports:
      - "${HTTP_PORT:-80}:80"
      - "${HTTPS_PORT:-443}:443"
    volumes:
      - ./nginx.simple.conf:/etc/nginx/nginx.conf:ro
      - /etc/letsencrypt:/etc/letsencrypt:ro
      - /var/www/certbot:/var/www/certbot:ro
    depends_on:
      app:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:80/nginx-health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    networks:
      - tiris-backend-network
    profiles:
      - ssl

  # Certbot for Let's Encrypt certificates
  certbot:
    image: certbot/certbot:latest
    container_name: tiris-certbot
    volumes:
      - /etc/letsencrypt:/etc/letsencrypt
      - /var/www/certbot:/var/www/certbot
    profiles:
      - ssl

# Simple volume configuration
volumes:
  postgres_simple_data:
    driver: local

# Network configuration for multi-app setup
networks:
  tiris-backend-network:
    name: tiris-backend-network
    driver: bridge