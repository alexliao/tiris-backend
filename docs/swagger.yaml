basePath: /v1
definitions:
  api.ErrorDetail:
    properties:
      code:
        type: string
      details:
        type: string
      message:
        type: string
    type: object
  api.ErrorResponse:
    properties:
      error:
        $ref: '#/definitions/api.ErrorDetail'
      metadata:
        $ref: '#/definitions/api.ResponseMetadata'
      success:
        type: boolean
    type: object
  api.HealthResponse:
    properties:
      dependencies:
        additionalProperties:
          $ref: '#/definitions/api.HealthStatus'
        type: object
      status:
        type: string
      timestamp:
        type: string
      version:
        type: string
    type: object
  api.HealthStatus:
    properties:
      details:
        additionalProperties: true
        type: object
      message:
        type: string
      status:
        type: string
    type: object
  api.PaginatedResponse:
    properties:
      data: {}
      metadata:
        $ref: '#/definitions/api.ResponseMetadata'
      pagination:
        $ref: '#/definitions/api.PaginationMetadata'
      success:
        type: boolean
    type: object
  api.PaginationMetadata:
    properties:
      has_more:
        type: boolean
      limit:
        type: integer
      next_offset:
        type: integer
      offset:
        type: integer
      total:
        type: integer
    type: object
  api.ResponseMetadata:
    properties:
      timestamp:
        type: string
      trace_id:
        type: string
    type: object
  api.SuccessResponse:
    properties:
      data: {}
      metadata:
        $ref: '#/definitions/api.ResponseMetadata'
      success:
        type: boolean
    type: object
  services.AuthResponse:
    properties:
      access_token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiN2U2YTg5ZTYtM2U0Ni00MWQzLWFlYzYtMjg1ZmQ5Mjg5ODNiIiwidXNlcm5hbWUiOiJqb2huZG9lIiwiZXhwIjoxNzg2OTk5NjQyfQ.abcd1234
        type: string
      expires_in:
        example: 3600
        type: integer
      refresh_token:
        example: rt_1234567890abcdef
        type: string
      token_type:
        example: Bearer
        type: string
      user:
        $ref: '#/definitions/services.UserInfo'
    type: object
  services.CallbackRequest:
    properties:
      code:
        example: 4/0AX4XfWjQK9rO8tA1bCdE9...
        type: string
      provider:
        enum:
        - google
        - wechat
        example: google
        type: string
      state:
        example: abc123def456ghi789
        type: string
    required:
    - code
    - provider
    - state
    type: object
  services.CreateSubAccountRequest:
    properties:
      name:
        example: BTC Trading Account
        maxLength: 100
        minLength: 1
        type: string
      symbol:
        example: BTC/USDT
        maxLength: 20
        minLength: 1
        type: string
      trading_id:
        example: 453f0347-3959-49de-8e3f-1cf7c8e0827c
        type: string
    required:
    - name
    - symbol
    - trading_id
    type: object
  services.CreateTradingLogRequest:
    description: 'Request for creating a new trading log entry. The ''info'' field
      structure depends on the ''type'' value: - For types ''long'', ''short'', ''stop_loss'':
      Must use TradingLogInfo structure - For types ''deposit'', ''withdraw'': Must
      use DepositWithdrawInfo structure - For other types: Can use any object structure'
    properties:
      info:
        additionalProperties: true
        type: object
      message:
        example: Successfully executed BUY order for 0.5 BTC at $42,500
        minLength: 1
        type: string
      source:
        enum:
        - manual
        - bot
        example: bot
        type: string
      sub_account_id:
        example: b4e006d0-1069-4ef4-b33f-7690af4929f4
        type: string
      trading_id:
        example: 453f0347-3959-49de-8e3f-1cf7c8e0827c
        type: string
      transaction_id:
        example: 1a098613-e738-447d-b921-74c3594df3a5
        type: string
      type:
        enum:
        - long
        - short
        - stop_loss
        - deposit
        - withdraw
        - trade_execution
        - api_call
        - system_event
        - error
        - custom
        example: long
        maxLength: 50
        minLength: 1
        type: string
    required:
    - message
    - source
    - trading_id
    - type
    type: object
  services.CreateTradingRequest:
    properties:
      api_key:
        example: your_api_key_here
        minLength: 1
        type: string
      api_secret:
        example: your_api_secret_here
        minLength: 1
        type: string
      name:
        example: My Trading Account
        maxLength: 100
        minLength: 1
        type: string
      type:
        example: binance
        type: string
    required:
    - api_key
    - api_secret
    - name
    - type
    type: object
  services.LoginRequest:
    properties:
      provider:
        enum:
        - google
        - wechat
        example: google
        type: string
      redirect_uri:
        example: https://yourapp.com/auth/callback
        type: string
    required:
    - provider
    - redirect_uri
    type: object
  services.LoginResponse:
    properties:
      auth_url:
        example: https://accounts.google.com/oauth/authorize?client_id=...&redirect_uri=...&state=abc123
        type: string
      state:
        example: abc123def456ghi789
        type: string
    type: object
  services.RefreshRequest:
    properties:
      refresh_token:
        example: rt_1234567890abcdef
        type: string
    required:
    - refresh_token
    type: object
  services.SubAccountResponse:
    properties:
      balance:
        type: number
      created_at:
        type: string
      id:
        type: string
      info:
        additionalProperties: true
        type: object
      name:
        type: string
      symbol:
        type: string
      trading_id:
        type: string
      updated_at:
        type: string
      user_id:
        type: string
    type: object
  services.TradingLogQueryResponse:
    properties:
      has_more:
        type: boolean
      limit:
        type: integer
      offset:
        type: integer
      total:
        type: integer
      trading_logs:
        items:
          $ref: '#/definitions/services.TradingLogResponse'
        type: array
    type: object
  services.TradingLogResponse:
    properties:
      id:
        type: string
      info:
        additionalProperties: true
        type: object
      message:
        type: string
      source:
        type: string
      sub_account_id:
        type: string
      timestamp:
        type: string
      trading_id:
        type: string
      transaction_id:
        type: string
      type:
        type: string
      user_id:
        type: string
    type: object
  services.TradingResponse:
    properties:
      api_key:
        description: Masked in production
        type: string
      created_at:
        type: string
      id:
        type: string
      info:
        additionalProperties: true
        type: object
      name:
        type: string
      status:
        type: string
      type:
        type: string
      updated_at:
        type: string
      user_id:
        type: string
    type: object
  services.TransactionQueryResponse:
    properties:
      has_more:
        type: boolean
      limit:
        type: integer
      offset:
        type: integer
      total:
        type: integer
      transactions:
        items:
          $ref: '#/definitions/services.TransactionResponse'
        type: array
    type: object
  services.TransactionResponse:
    properties:
      amount:
        type: number
      closing_balance:
        type: number
      direction:
        type: string
      id:
        type: string
      info:
        additionalProperties: true
        type: object
      price:
        type: number
      quote_symbol:
        type: string
      reason:
        type: string
      sub_account_id:
        type: string
      timestamp:
        type: string
      trading_id:
        type: string
      user_id:
        type: string
    type: object
  services.UpdateBalanceRequest:
    properties:
      amount:
        example: 500.25
        type: number
      direction:
        enum:
        - credit
        - debit
        example: credit
        type: string
      info:
        additionalProperties: true
        type: object
      reason:
        example: Successful BTC/USDT trade profit
        maxLength: 255
        minLength: 1
        type: string
    required:
    - amount
    - direction
    - reason
    type: object
  services.UpdateSubAccountRequest:
    properties:
      balance:
        example: 1250.75
        minimum: 0
        type: number
      name:
        example: ETH Trading Account
        maxLength: 100
        minLength: 1
        type: string
      symbol:
        example: ETH/USD
        maxLength: 20
        minLength: 1
        type: string
    type: object
  services.UpdateTradingRequest:
    properties:
      api_key:
        example: updated_api_key_12345
        minLength: 1
        type: string
      api_secret:
        example: updated_api_secret_67890
        minLength: 1
        type: string
      name:
        example: My Updated Trading Account
        maxLength: 100
        minLength: 1
        type: string
      status:
        enum:
        - active
        - inactive
        example: active
        type: string
    type: object
  services.UpdateUserRequest:
    properties:
      avatar:
        example: https://example.com/avatars/johndoe.jpg
        type: string
      settings:
        additionalProperties: true
        type: object
      username:
        example: johndoe_trader
        maxLength: 50
        minLength: 3
        type: string
    type: object
  services.UserInfo:
    properties:
      avatar:
        example: https://lh3.googleusercontent.com/a/user-avatar-url
        type: string
      email:
        example: john.doe@example.com
        type: string
      id:
        example: 7e6a89e6-3e46-41d3-aec6-285fd928983b
        type: string
      info:
        additionalProperties: true
        type: object
      username:
        example: johndoe
        type: string
    type: object
  services.UserResponse:
    properties:
      avatar:
        type: string
      created_at:
        type: string
      email:
        type: string
      id:
        type: string
      info:
        additionalProperties: true
        type: object
      settings:
        additionalProperties: true
        type: object
      updated_at:
        type: string
      username:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: support@tiris.ai
    name: Tiris API Support
    url: https://tiris.ai/support
  description: A Go-based microservice for quantitative trading data management, providing
    RESTful APIs for user management, trading integration, and trading operations.
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  termsOfService: https://tiris.ai/terms
  title: Tiris Backend API
  version: "1.0"
paths:
  /admin/trading-logs:
    get:
      description: Lists all trading logs with filtering and pagination (admin only)
      parameters:
      - description: Filter by log type
        in: query
        name: type
        type: string
      - description: Filter by source
        enum:
        - manual
        - bot
        in: query
        name: source
        type: string
      - description: Start date (RFC3339 format)
        in: query
        name: start_date
        type: string
      - description: End date (RFC3339 format)
        in: query
        name: end_date
        type: string
      - default: 100
        description: Number of logs to return
        in: query
        name: limit
        type: integer
      - default: 0
        description: Number of logs to skip
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/services.TradingLogQueryResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      security:
      - BearerAuth: []
      summary: List all trading logs
      tags:
      - TradingLogs
  /admin/trading-logs/{id}:
    get:
      description: Retrieves a trading log by ID (admin only)
      parameters:
      - description: Trading Log ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/services.TradingLogResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get trading log by ID
      tags:
      - TradingLogs
  /admin/tradings:
    get:
      description: Lists all trading configurations with pagination (admin
        only)
      parameters:
      - default: 100
        description: Number of tradings to return
        in: query
        name: limit
        type: integer
      - default: 0
        description: Number of tradings to skip
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.PaginatedResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      security:
      - BearerAuth: []
      summary: List all tradings
      tags:
      - Tradings
  /admin/tradings/{id}:
    get:
      description: Retrieves a trading by ID (admin only)
      parameters:
      - description: Trading ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/services.TradingResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get trading by ID
      tags:
      - Tradings
  /admin/transactions:
    get:
      description: Lists all transactions with filtering and pagination (admin only)
      parameters:
      - description: Filter by direction
        enum:
        - debit
        - credit
        in: query
        name: direction
        type: string
      - description: Filter by reason
        in: query
        name: reason
        type: string
      - description: Start date (RFC3339 format)
        in: query
        name: start_date
        type: string
      - description: End date (RFC3339 format)
        in: query
        name: end_date
        type: string
      - description: Minimum amount filter
        in: query
        name: min_amount
        type: number
      - description: Maximum amount filter
        in: query
        name: max_amount
        type: number
      - default: 100
        description: Number of transactions to return
        in: query
        name: limit
        type: integer
      - default: 0
        description: Number of transactions to skip
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/services.TransactionQueryResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      security:
      - BearerAuth: []
      summary: List all transactions
      tags:
      - Transactions
  /admin/transactions/{id}:
    get:
      description: Retrieves a transaction by ID (admin only)
      parameters:
      - description: Transaction ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/services.TransactionResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get transaction by ID
      tags:
      - Transactions
  /auth/callback:
    post:
      consumes:
      - application/json
      description: Handles OAuth callback and returns JWT tokens
      parameters:
      - description: Callback request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/services.CallbackRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/services.AuthResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Handle OAuth callback
      tags:
      - Authentication
  /auth/login:
    post:
      consumes:
      - application/json
      description: Initiates OAuth login flow and returns authorization URL
      parameters:
      - description: Login request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/services.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/services.LoginResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Initiate OAuth login
      tags:
      - Authentication
  /auth/logout:
    post:
      description: Logs out the current user and invalidates session
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.SuccessResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Logout user
      tags:
      - Authentication
  /auth/refresh:
    post:
      consumes:
      - application/json
      description: Refreshes access token using refresh token
      parameters:
      - description: Refresh request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/services.RefreshRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/services.AuthResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Refresh access token
      tags:
      - Authentication
  /health:
    get:
      description: Provides detailed health information about the service and its
        dependencies
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.HealthResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Detailed health check
      tags:
      - Health
  /health/live:
    get:
      description: Kubernetes liveness probe - checks if the application is running
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.SuccessResponse'
      summary: Liveness probe
      tags:
      - Health
  /health/ready:
    get:
      description: Kubernetes readiness probe - checks if the application is ready
        to serve traffic
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.HealthResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Readiness probe
      tags:
      - Health
  /sub-accounts:
    get:
      description: Retrieves all sub-account configurations for the authenticated
        user, optionally filtered by trading
      parameters:
      - description: Filter by trading ID
        in: query
        name: trading_id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/services.SubAccountResponse'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get user sub-accounts
      tags:
      - SubAccounts
    post:
      consumes:
      - application/json
      description: Creates a new sub-account for the authenticated user
      parameters:
      - description: Create sub-account request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/services.CreateSubAccountRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/services.SubAccountResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create new sub-account
      tags:
      - SubAccounts
  /sub-accounts/{id}:
    delete:
      description: Deletes a sub-account configuration (must belong to authenticated
        user)
      parameters:
      - description: Sub-account ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete sub-account
      tags:
      - SubAccounts
    get:
      description: Retrieves a specific sub-account configuration by ID (must belong
        to authenticated user)
      parameters:
      - description: Sub-account ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/services.SubAccountResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get sub-account by ID
      tags:
      - SubAccounts
    put:
      consumes:
      - application/json
      description: Updates an existing sub-account configuration (must belong to authenticated
        user)
      parameters:
      - description: Sub-account ID
        in: path
        name: id
        required: true
        type: string
      - description: Update sub-account request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/services.UpdateSubAccountRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/services.SubAccountResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update sub-account
      tags:
      - SubAccounts
  /sub-accounts/{id}/balance:
    put:
      consumes:
      - application/json
      description: Updates sub-account balance with proper logging (must belong to
        authenticated user)
      parameters:
      - description: Sub-account ID
        in: path
        name: id
        required: true
        type: string
      - description: Update balance request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/services.UpdateBalanceRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/services.SubAccountResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update sub-account balance
      tags:
      - SubAccounts
  /sub-accounts/symbol/{symbol}:
    get:
      description: Retrieves all sub-accounts for a specific trading symbol (must
        belong to authenticated user)
      parameters:
      - description: Trading symbol
        in: path
        name: symbol
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/services.SubAccountResponse'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get sub-accounts by symbol
      tags:
      - SubAccounts
  /trading-logs:
    get:
      description: Retrieves trading log history for the authenticated user with filtering
        and pagination
      parameters:
      - description: Filter by log type
        in: query
        name: type
        type: string
      - description: Filter by source
        enum:
        - manual
        - bot
        in: query
        name: source
        type: string
      - description: Start date (RFC3339 format)
        in: query
        name: start_date
        type: string
      - description: End date (RFC3339 format)
        in: query
        name: end_date
        type: string
      - default: 100
        description: Number of logs to return
        in: query
        name: limit
        type: integer
      - default: 0
        description: Number of logs to skip
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/services.TradingLogQueryResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get user trading logs
      tags:
      - TradingLogs
    post:
      consumes:
      - application/json
      description: |-
        Creates a new trading log entry for the authenticated user.

        **Important**: The 'info' field structure must match the 'type' field:

        **Business Logic Types** (trigger automatic financial calculations):

        **For long/short/stop_loss types** - Required fields in 'info':
        - stock_account_id (string): Sub-account UUID for the asset (e.g., ETH account)
        - currency_account_id (string): Sub-account UUID for the currency (e.g., USDT account)
        - price (number): Price per unit (must be positive, up to 8 decimal places)
        - volume (number): Quantity traded (must be positive, up to 8 decimal places)
        - stock (string): Asset symbol, 1-20 characters (e.g., "ETH")
        - currency (string): Currency symbol, 1-20 characters (e.g., "USDT")
        - fee (number): Trading fee (must be non-negative, up to 8 decimal places)

        **For deposit/withdraw types** - Required fields in 'info':
        - account_id (string): Target sub-account UUID for the operation
        - amount (number): Amount to deposit/withdraw (must be positive, up to 8 decimal places)
        - currency (string): Currency symbol, 1-20 characters (e.g., "USDT")

        **Request Examples**:

        **Long Position Example:**
        <pre><code>{
        ⠀⠀"trading_id": "453f0347-3959-49de-8e3f-1cf7c8e0827c",
        ⠀⠀"type": "long",
        ⠀⠀"source": "bot",
        ⠀⠀"message": "ETH long position opened",
        ⠀⠀"info": {
        ⠀⠀⠀⠀"stock_account_id": "eth-account-uuid",
        ⠀⠀⠀⠀"currency_account_id": "usdt-account-uuid",
        ⠀⠀⠀⠀"price": 3000.00,
        ⠀⠀⠀⠀"volume": 2.0,
        ⠀⠀⠀⠀"stock": "ETH",
        ⠀⠀⠀⠀"currency": "USDT",
        ⠀⠀⠀⠀"fee": 12.00
        ⠀⠀}
        }</code></pre>

        **Deposit Example:**
        <pre><code>{
        ⠀⠀"trading_id": "453f0347-3959-49de-8e3f-1cf7c8e0827c",
        ⠀⠀"type": "deposit",
        ⠀⠀"source": "api",
        ⠀⠀"message": "USDT deposit to account",
        ⠀⠀"info": {
        ⠀⠀⠀⠀"account_id": "usdt-account-uuid",
        ⠀⠀⠀⠀"amount": 1000.00,
        ⠀⠀⠀⠀"currency": "USDT"
        ⠀⠀}
        }</code></pre>

        **Other Types**: Can use any object structure in the 'info' field
      parameters:
      - description: Create trading log request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/services.CreateTradingLogRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/services.TradingLogResponse'
        "400":
          description: 'Bad Request - Invalid request format, missing required fields,
            or incorrect ''info'' structure for the specified ''type''. Common validation
            errors: Missing required ''info'' fields for business logic types, Invalid
            data types or values in ''info'' fields, Non-existent sub-account IDs
            referenced in ''info'' fields'
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "404":
          description: Not Found - Trading ID or sub-account IDs referenced
            in 'info' field do not exist
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "422":
          description: Unprocessable Entity - Business logic validation failed (e.g.,
            insufficient balance for withdraw operations)
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create trading log
      tags:
      - TradingLogs
  /trading-logs/{id}:
    delete:
      description: Deletes a trading log entry (must belong to authenticated user
        and be manual)
      parameters:
      - description: Trading Log ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete trading log
      tags:
      - TradingLogs
    get:
      description: Retrieves a specific trading log by ID (must belong to authenticated
        user)
      parameters:
      - description: Trading Log ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/services.TradingLogResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get trading log by ID
      tags:
      - TradingLogs
  /trading-logs/sub-account/{sub_account_id}:
    get:
      description: Retrieves trading log history for a specific sub-account (must
        belong to authenticated user)
      parameters:
      - description: Sub-account ID
        in: path
        name: sub_account_id
        required: true
        type: string
      - description: Filter by log type
        in: query
        name: type
        type: string
      - description: Filter by source
        enum:
        - manual
        - bot
        in: query
        name: source
        type: string
      - description: Start date (RFC3339 format)
        in: query
        name: start_date
        type: string
      - description: End date (RFC3339 format)
        in: query
        name: end_date
        type: string
      - default: 100
        description: Number of logs to return
        in: query
        name: limit
        type: integer
      - default: 0
        description: Number of logs to skip
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/services.TradingLogQueryResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get sub-account trading logs
      tags:
      - TradingLogs
  /trading-logs/time-range:
    get:
      description: Retrieves trading logs within a specific time range for the authenticated
        user
      parameters:
      - description: Start time (RFC3339 format)
        in: query
        name: start_time
        required: true
        type: string
      - description: End time (RFC3339 format)
        in: query
        name: end_time
        required: true
        type: string
      - description: Filter by log type
        in: query
        name: type
        type: string
      - description: Filter by source
        enum:
        - manual
        - bot
        in: query
        name: source
        type: string
      - default: 100
        description: Number of logs to return
        in: query
        name: limit
        type: integer
      - default: 0
        description: Number of logs to skip
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/services.TradingLogQueryResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get trading logs by time range
      tags:
      - TradingLogs
  /trading-logs/trading/{trading_id}:
    get:
      description: Retrieves trading log history for a specific trading (must
        belong to authenticated user)
      parameters:
      - description: Trading ID
        in: path
        name: trading_id
        required: true
        type: string
      - description: Filter by log type
        in: query
        name: type
        type: string
      - description: Filter by source
        enum:
        - manual
        - bot
        in: query
        name: source
        type: string
      - description: Start date (RFC3339 format)
        in: query
        name: start_date
        type: string
      - description: End date (RFC3339 format)
        in: query
        name: end_date
        type: string
      - default: 100
        description: Number of logs to return
        in: query
        name: limit
        type: integer
      - default: 0
        description: Number of logs to skip
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/services.TradingLogQueryResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get trading logs
      tags:
      - TradingLogs
  /tradings:
    get:
      description: Retrieves all trading configurations for the authenticated
        user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/services.TradingResponse'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get user tradings
      tags:
      - Tradings
    post:
      consumes:
      - application/json
      description: Creates a new trading configuration for the authenticated
        user
      parameters:
      - description: Create trading request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/services.CreateTradingRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/services.TradingResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create new trading
      tags:
      - Tradings
  /tradings/{id}:
    delete:
      description: Deletes a trading configuration (must belong to authenticated
        user)
      parameters:
      - description: Trading ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete trading
      tags:
      - Tradings
    get:
      description: Retrieves a specific trading configuration by ID (must
        belong to authenticated user)
      parameters:
      - description: Trading ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/services.TradingResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get trading by ID
      tags:
      - Tradings
    put:
      consumes:
      - application/json
      description: Updates an existing trading configuration (must belong
        to authenticated user)
      parameters:
      - description: Trading ID
        in: path
        name: id
        required: true
        type: string
      - description: Update trading request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/services.UpdateTradingRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/services.TradingResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update trading
      tags:
      - Tradings
  /transactions:
    get:
      description: Retrieves transaction history for the authenticated user with filtering
        and pagination
      parameters:
      - description: Filter by direction
        enum:
        - debit
        - credit
        in: query
        name: direction
        type: string
      - description: Filter by reason
        in: query
        name: reason
        type: string
      - description: Start date (RFC3339 format)
        in: query
        name: start_date
        type: string
      - description: End date (RFC3339 format)
        in: query
        name: end_date
        type: string
      - description: Minimum amount filter
        in: query
        name: min_amount
        type: number
      - description: Maximum amount filter
        in: query
        name: max_amount
        type: number
      - default: 100
        description: Number of transactions to return
        in: query
        name: limit
        type: integer
      - default: 0
        description: Number of transactions to skip
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/services.TransactionQueryResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get user transactions
      tags:
      - Transactions
  /transactions/{id}:
    get:
      description: Retrieves a specific transaction by ID (must belong to authenticated
        user)
      parameters:
      - description: Transaction ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/services.TransactionResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get transaction by ID
      tags:
      - Transactions
  /transactions/sub-account/{sub_account_id}:
    get:
      description: Retrieves transaction history for a specific sub-account (must
        belong to authenticated user)
      parameters:
      - description: Sub-account ID
        in: path
        name: sub_account_id
        required: true
        type: string
      - description: Filter by direction
        enum:
        - debit
        - credit
        in: query
        name: direction
        type: string
      - description: Filter by reason
        in: query
        name: reason
        type: string
      - description: Start date (RFC3339 format)
        in: query
        name: start_date
        type: string
      - description: End date (RFC3339 format)
        in: query
        name: end_date
        type: string
      - description: Minimum amount filter
        in: query
        name: min_amount
        type: number
      - description: Maximum amount filter
        in: query
        name: max_amount
        type: number
      - default: 100
        description: Number of transactions to return
        in: query
        name: limit
        type: integer
      - default: 0
        description: Number of transactions to skip
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/services.TransactionQueryResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get sub-account transactions
      tags:
      - Transactions
  /transactions/time-range:
    get:
      description: Retrieves transactions within a specific time range for the authenticated
        user
      parameters:
      - description: Start time (RFC3339 format)
        in: query
        name: start_time
        required: true
        type: string
      - description: End time (RFC3339 format)
        in: query
        name: end_time
        required: true
        type: string
      - description: Filter by direction
        enum:
        - debit
        - credit
        in: query
        name: direction
        type: string
      - description: Filter by reason
        in: query
        name: reason
        type: string
      - description: Minimum amount filter
        in: query
        name: min_amount
        type: number
      - description: Maximum amount filter
        in: query
        name: max_amount
        type: number
      - default: 100
        description: Number of transactions to return
        in: query
        name: limit
        type: integer
      - default: 0
        description: Number of transactions to skip
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/services.TransactionQueryResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get transactions by time range
      tags:
      - Transactions
  /transactions/trading/{trading_id}:
    get:
      description: Retrieves transaction history for a specific trading (must
        belong to authenticated user)
      parameters:
      - description: Trading ID
        in: path
        name: trading_id
        required: true
        type: string
      - description: Filter by direction
        enum:
        - debit
        - credit
        in: query
        name: direction
        type: string
      - description: Filter by reason
        in: query
        name: reason
        type: string
      - description: Start date (RFC3339 format)
        in: query
        name: start_date
        type: string
      - description: End date (RFC3339 format)
        in: query
        name: end_date
        type: string
      - description: Minimum amount filter
        in: query
        name: min_amount
        type: number
      - description: Maximum amount filter
        in: query
        name: max_amount
        type: number
      - default: 100
        description: Number of transactions to return
        in: query
        name: limit
        type: integer
      - default: 0
        description: Number of transactions to skip
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/services.TransactionQueryResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get trading transactions
      tags:
      - Transactions
  /users:
    get:
      description: Lists all users with pagination (admin only)
      parameters:
      - default: 100
        description: Number of users to return
        in: query
        name: limit
        type: integer
      - default: 0
        description: Number of users to skip
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.PaginatedResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      security:
      - BearerAuth: []
      summary: List all users
      tags:
      - Users
  /users/{id}:
    get:
      description: Retrieves a user by their ID (admin only)
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/services.UserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get user by ID
      tags:
      - Users
  /users/{id}/disable:
    put:
      description: Disables a user account by ID (admin only)
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Disable user account
      tags:
      - Users
  /users/me:
    get:
      description: Retrieves the profile of the currently authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/services.UserResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get current user profile
      tags:
      - Users
    put:
      consumes:
      - application/json
      description: Updates the profile of the currently authenticated user
      parameters:
      - description: Update user request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/services.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/services.UserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update current user profile
      tags:
      - Users
  /users/me/stats:
    get:
      description: Retrieves statistics for the currently authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get current user statistics
      tags:
      - Users
securityDefinitions:
  BearerAuth:
    description: 'Enter JWT Bearer token in the format: Bearer {token}'
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
x-extension-openapi:
  info:
    x-logo:
      url: https://tiris.ai/logo.png
